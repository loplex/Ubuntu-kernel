diff -Naur ecryptfs/tests/run_one.sh ec-new/tests/run_one.sh
--- ecryptfs/tests/run_one.sh	1969-12-31 16:00:00.000000000 -0800
+++ ec-new/tests/run_one.sh	2012-06-11 14:35:45.127021984 -0700
@@ -0,0 +1,229 @@
+#!/bin/bash
+#
+# eCryptfs test suite harness
+# Author: Tyler Hicks <tyhicks@canonical.com>
+#
+# Copyright (C) 2012 Canonical, Ltd.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
+#
+# Example usage:
+#
+# # ./tests/run_tests.sh -K -c destructive -d /dev/vdb -l /lower -u /upper
+#
+# This would run kernel tests in the destructive category, as defined in
+# kernel/tests.rc. /dev/vdb would be the block device containing the lower
+# filesystem, which would be mounted at /lower. The eCryptfs mount point would
+# be /upper.
+#
+
+run_tests_dir=$(dirname $0)
+rc=1
+
+. ${run_tests_dir}/lib/etl_funcs.sh
+
+blocks=0
+categories=""
+device=""
+disk_dir=""
+failed=0
+kernel=false
+ktests=""
+lower_fs=""
+lower_mnt=""
+passed=0
+upper_mnt=""
+userspace=false
+utests=""
+
+run_tests_cleanup()
+{
+	etl_remove_disk
+	exit $rc
+}
+trap run_tests_cleanup 0 1 2 3 15
+
+run_tests()
+{
+	test_dir=$1
+	tests=$2
+
+	for etest in $tests; do
+		printf "%-16s\t" $(basename "$etest" .sh)
+
+		${test_dir}/${etest}
+		if [ $? -ne 0 ]; then
+			((failed++))
+			printf "FAIL\n"
+		else
+			((passed++))
+			printf "pass\n"
+		fi
+	done
+}
+
+usage()
+{
+	echo "Usage: $(basename $0) [options] -K|-U -t test_name -b blocks -l lower_mnt -u upper_mnt"
+	echo "  or:  $(basename $0) [options] -K|-U -t test_name -d device -l lower_mnt -u upper_mnt"
+	echo
+	echo "eCryptfs test harness"
+	echo
+	echo "  -b blocks	number of 1K blocks used when creating backing "
+	echo "		disk for lower filesystem (not compatible "
+	echo "		with -d)"
+	echo "  -t test_name       Name of the test that is to be run. "
+	echo "  -D disk_dir	directory used to store created backing disk "
+	echo "		when using -b (not compatible with -d)"
+	echo "  -d device	backing device to mount lower filesystem, such "
+	echo "		as /dev/sdd3 (not compatible with -b)"
+	echo "  -f lower_fs	lower filesystem type (ext2, ext3, ext4)"
+	echo "  -h		display this help and exit"
+	echo "  -K		run tests relating to the kernel module"
+	echo "  -l lower_mnt	destination path to mount lower filesystem"
+	echo "  -U		run tests relating to the userspace utilities/"
+	echo "  -u upper_mnt	destination path to mount upper filesystem"
+}
+
+while getopts "b:t:D:d:f:hKl:Uu:" opt; do
+	case $opt in
+	b)
+		blocks=$OPTARG
+		;;
+	t)
+		test_name=$OPTARG
+		;;
+	d)
+		device=$OPTARG
+		;;
+	D)
+		disk_dir=$OPTARG
+		;;
+	f)
+		lower_fs=$OPTARG
+		;;
+	h)
+		usage
+		rc=0
+		exit
+		;;
+	K)
+		kernel=true
+		;;
+	l)
+		lower_mnt=$OPTARG
+		;;
+	U)
+		userspace=true
+		;;
+	u)
+		upper_mnt=$OPTARG
+		;;
+	\?)
+		usage 1>&2
+		exit
+		;;
+	:)
+		usage 1>&2
+		exit
+		;;
+	esac
+done
+
+if [ -z "$lower_mnt" ] || [ -z "$upper_mnt" ]; then
+	# Lower and upper mounts must be specified
+	echo "Lower and upper mounts must be specified" 1>&2
+	usage 1>&2
+	exit
+elif [ "$blocks" -lt 1 ] && [ -z "$device" ]; then
+	# Must specify blocks for disk creation *or* an existing device
+	echo "Blocks for disk creation or an existing device must be specified" 1>&2
+	usage 1>&2
+	exit
+elif [ "$blocks" -gt 0 ] && [ -n "$device" ]; then
+	# Can't specify blocks for disk creation *and* an existing device
+	echo "Cannot specify blocks for disk creation *and* also an existing device" 1>&2
+	usage 1>&2
+	exit
+elif [ -n "$disk_dir" ] && [ -n "$device" ]; then
+	# Can't specify a dir for disk creation and an existing device
+	echo "Cannot specify a directory for disk creation *and* also an existing device" 1>&2
+	usage 1>&2
+	exit
+elif [ -z "$test_name" ]; then
+	# Lets not assume anything here
+	echo "Must specify at least one or more tests to be run." 1>&2
+	usage 1>&2
+	exit
+elif ! $kernel && ! $userspace ; then
+	# Must specify at least one of these
+	echo "Must specify one of -U or -K" 1>&2
+	usage 1>&2
+	exit
+elif [ ! -d "$lower_mnt" ]; then
+	# A small attempt at making sure we're dealing with directories
+	echo "Lower mount point must exist" 1>&2
+	usage 1>&2
+	exit
+elif [ ! -d "$upper_mnt" ]; then
+	# A small attempt at making sure we're dealing with directories
+	echo "Upper mount point must exist" 1>&2
+	usage 1>&2
+	exit
+elif [ -n "$disk_dir" ] && [ ! -d "$disk_dir" ]; then
+	# A small attempt at making sure we're dealing with a directory
+	echo "Directory used to store created backing disk must exist" 1>&2
+	usage 1>&2
+	exit
+fi
+
+export ETL_LFS=$lower_fs
+export ETL_LMOUNT_SRC=$device
+export ETL_LMOUNT_DST=$lower_mnt
+export ETL_MOUNT_SRC=$lower_mnt
+export ETL_MOUNT_DST=$upper_mnt
+
+if [ "$blocks" -gt 0 ]; then
+	etl_create_disk $blocks $disk_dir
+	if [ $? -ne 0 ]; then
+		rc=1
+		exit
+	fi
+	export ETL_LMOUNT_SRC=$ETL_DISK
+fi
+
+# Source in the kernel and/or userspace tests.rc files to build the test lists
+if $kernel ; then
+	run_tests "${run_tests_dir}/kernel" "$test_name"
+	if [ $? -ne 0 ]; then
+		rc=1
+		exit
+	fi
+fi
+if $userspace ; then
+	run_tests "${run_tests_dir}/userspace" "$test_name"
+	if [ $? -ne 0 ]; then
+		rc=1
+		exit
+	fi
+fi
+
+echo ""
+echo "Test Summary:"
+echo "$passed passed"
+echo "$failed failed"
+
+rc=$failed
+exit
