#!/usr/bin/env python
#
# shank is the "stable bot" or "stab-bot".
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
from ktl.check_component                import CheckComponent
from ktl.utils                          import stdo, date_to_string, run_command
from ktl.ubuntu                         import Ubuntu
from ktl.std_app                        import StdApp
from ktl.workflow                       import Properties
from ktl.tracking_bug                   import TrackingBug
from lpltk.LaunchpadService             import LaunchpadService
from datetime                           import datetime
from urllib                             import quote
from urllib2                            import HTTPError
from ktl.messaging                      import Email, Status
from ktl.bugs                           import DeltaTime
from ktl.termcolor                      import colored
import re
import traceback
import json

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import info, debug, error, warning, basicConfig, INFO, DEBUG, WARNING

def verbose(msg, color='green'):
    stdo(colored(msg, color))

# WorkflowBug
#
class WorkflowBug():
    # __init__
    #
    def __init__(s, lpbug, sauron=False):
        s.title = lpbug.title
        verbose('            WorkflowBug.__init__\n', 'blue')       # FIXME bjf - debugging
        verbose('                      title: "%s"\n' % s.title, 'blue')  # FIXME bjf - debugging

        try:
            s.pkg_name = re.findall('linux[^:]*', s.title)[0]
        except IndexError:
            s.pkg_name = None
        verbose('                   pkg_name: "%s"\n' % s.pkg_name, 'blue')  # FIXME bjf - debugging

        try:
            s.pkg_version = re.findall('([0-9]+\.[^ ]+)', s.title)[0]
        except IndexError:
            s.pkg_version = None
        verbose('                pkg_version: "%s"\n' % s.pkg_version, 'blue')  # FIXME bjf - debugging

        if s.pkg_name is not None and s.pkg_version is not None:
            s.series = Ubuntu().series_name(s.pkg_name, s.pkg_version)
        else:
            s.series = None
        verbose('                     series: "%s"\n' % s.series, 'blue')  # FIXME bjf - debugging

# Shank
#
class Shank(StdApp):
    # __init__
    #
    def __init__(self, args):
        StdApp.__init__(self)
        self.defaults = {}

        self.args = args

        self.state_map = {
            # Task, Current State, Action
            # Note: some tasks are only for and present in Kernel
            # Development Workflow, others only on SRU workflow
            'prepare-package'         : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.prep_package_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'upload-to-ppa'           : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':self.upload_to_ppa_confirmed},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':None},
                                         'Unknown' : {'action':None},
                                         },
            'prepare-package-lbm'     : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.prep_package_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'prepare-package-lrm'     : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.prep_package_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'prepare-package-lum'     : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.prep_package_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'prepare-package-meta'    : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.prep_package_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'prepare-package-ports-meta':{'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.prep_package_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'prepare-package-signed'   : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.prep_package_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'promote-to-proposed'     : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.promote_to_proposed_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'verification-testing'    : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.verification_testing_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'certification-testing'   : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':self.certification_testing_invalid},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.certification_testing_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'regression-testing'      : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':self.regression_testing_invalid},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.regression_testing_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'package-testing'         : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.package_testing_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'promote-to-updates'      : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.check_for_final_close},
                                         'Unknown' : {'action':None},
                                         },
            'promote-to-security'     : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.check_for_final_close},
                                         'Unknown' : {'action':None},
                                         },
            'promote-to-release'      : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':None},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.promote_to_release_fix_released},
                                         'Unknown' : {'action':None},
                                         },
            'security-signoff'        : {'New' : {'action':None},
                                         'Incomplete' : {'action':None},
                                         'Opinion' : {'action':None},
                                         'Invalid' : {'action':self.security_signoff_finished},
                                         "Won't Fix" : {'action':None},
                                         'Expired' : {'action':None},
                                         'Confirmed' : {'action':None},
                                         'Triaged' : {'action':None},
                                         'In Progress' : {'action':None},
                                         'Fix Committed' : {'action':None},
                                         'Fix Released' : {'action':self.security_signoff_finished},
                                         'Unknown' : {'action':None},
                                         },
        }

    def verbose(self, msg, color='green'):
        if self.args.verbose:
            stdo(colored(msg, color))

    # get_buglist
    #
    def get_buglist(s, project):
        '''
        Perform a search of Launchpad to get a list of all the bugs that match
        our criteria.

        A list of the bug ids is returned.
        '''
        retval = []

        search_tags            = [   # A list of the tags we care about
                'kernel-release-tracking-bug'
            ]
        search_tags_combinator = "All"
        search_status          = ["New", "In Progress", "Incomplete", "Fix Committed"] # A list of the bug statuses that we care about
        search_since           = datetime(year=2013, month=1, day=1)
        lp_project = s.lp.projects[project]
        tasks = lp_project.search_tasks(status=search_status, tags=search_tags, tags_combinator=search_tags_combinator, modified_since=search_since)

        for task in tasks:
            bug = task.bug
            info('found: %s' % bug.id)
            retval.append(bug.id)

        return retval

    # initialize
    #
    def initialize(self):
        self.defaults['launchpad_client_name'] = 'kernel-team-sru-workflow-manager'
        if self.args.staging:
            self.defaults['launchpad_services_root'] = 'qastaging'
        self.lp = LaunchpadService(self.defaults)
        self.ubuntu = Ubuntu()

        # The service.distributions property is a collection of distributions. We
        # pretty much only care about one, 'ubuntu'.
        #
        self.distro = self.lp.distributions['ubuntu']

        # Get set up for email and status messages
        if 'mail_notify' in self.cfg:
            mcfg = self.cfg['mail_notify']
            self.email = Email(mcfg['smtp_server'].encode('UTF-8'), mcfg['smtp_user'].encode('UTF-8'), mcfg['smtp_pass'].encode('UTF-8'))

        scfg = self.cfg['status_net']
        self.status = Status(scfg['url'], scfg['user'], scfg['pass'])

        # Get the text for spamming bugs
        spamtextpath =  path.join(path.dirname(__file__), self.cfg['bug_spam']['text_filename'])
        self.verbose('Bug spam text is from file %s\n' % spamtextpath)
        self.spamtext = open(spamtextpath, 'r').read()

        self.taskbyname = {}

        self.printlink = "(No link)"

        return

    def shank(self, bugid):
        bug = self.lp.get_bug(bugid)

        # Determine this bugs project.
        #
        for t in bug.tasks:
            task_name       = t.bug_target_name
            if task_name in self.projects_tracked:
                self.projectname = task_name
                break

        self.wfb = WorkflowBug(bug)

        self.printlink =  '%s : (%s)\n' % (bug.id, self.bug_url(bug.id)),
        self.verbose('Processing: %s' % self.printlink)

        # initialize any per-bug variables that we use
        self.bugtags = []
        for atag in bug.tags:
            self.bugtags.append(atag)
        performReleaseTest = False
        self.certification_testing_complete = False
        self.regression_testing_complete = False
        self.security_signoff_complete = False
        self.security_publishing_required = False

        # Initialize the properties object
        self.props = Properties(bug)
        #
        # list any Properties from bug description
        props = bug.properties
        if len(props) > 0:
            self.verbose('    Properties:\n')
            for prop in props:
                self.verbose('        %s: %s\n' % (prop, props[prop]))

        self.verbose('\n    Scanning bug tasks:')
        # We iterate through tasks on a bug but we need access to the other tasks, so first build a list up from of all tasks on this bug
        # TODO This is a bit sloppy and I should probably build one list and walk it twice.
        try:
            # TODO revisit this, but hardcode for now
            #mtstring = self.project.display_name
            mtstring = self.projectname

            self.taskbyname = {}
            for t in bug.tasks:
                task_name       = t.bug_target_name

                if task_name == mtstring:
                    # we save a pointer to the master task and check to make sure we should process this bug
                    self.taskbyname[mtstring] = t
                    if t.status == 'In Progress':
                        continue
                    else:
                        if not self.args.sauron:
                            self.verbose('    Not processing this bug because master task state is set to %s\n' % (t.status))
                            raise RuntimeError

                if not task_name.startswith(mtstring):
                    # Ignore the tasks assigned to the actual package, we care about workflow only
                    self.verbose("\n        %-25s\n" % (task_name))
                    self.verbose('            Action: Skipping non-workflow task\n')
                    continue

                # add one to account for the trailing /
                therest = task_name[len(mtstring)+1:].strip()
                self.taskbyname[therest] = t

        except RuntimeError:
            # end processing for this bug
            self.verbose('    Quitting this bug\n')
            return

        # Verify the build state of packages in this bug. We do
        # everything in one go as we get build information for all
        # packages
        self.verbose('\n    Checking status for packages in this bug:\n')
        if not self.package_check(bug):
            return

        # now walk them one at a time
        self.verbose('\n    Processing bug tasks:')
        for t in bug.tasks:
            task_name = t.bug_target_name.strip()
            # bug_target_name includes both the main and sub task in the string
            # so for example it could be "Kernel SRU Workflow prepare-package"
            # so we have to strip off the right hand part
            # The task can also be just the single parent task
            #

            if task_name == mtstring:
                self.verbose("\n        %-25s\n" % (task_name))
                self.verbose('            Action: Skipping empty master workflow task \n')
                return

            if not task_name.startswith(mtstring):
                # Ignore the tasks assigned to the actual package, we care about workflow only
                self.verbose("\n        %-25s\n" % (task_name))
                self.verbose('            Action: Skipping non-workflow task\n')
                return

            therest = task_name[len(mtstring)+1:].strip()
            task_name = therest

            state      = t.status
            importance = t.importance
            assignee    = t.assignee
            if assignee is None:
                assignee = '*Unassigned'
            else:
                assignee = assignee.display_name

            self.verbose("\n        %-25s  %15s" % (task_name, state), 'yellow')
            self.verbose("  %10s  %s\n" % (importance, assignee))

            if task_name not in self.state_map:
                print self.printlink,
                print("            Warning: I don't know how to handle the task <%s>, skipping" % (task_name))
                return

            if 'action' not in self.state_map[task_name][state]:
                print self.printlink,
                print("            Error: No action found for state <%s> and task <%s>" % (state, task_name))
                raise ValueError

            action = self.state_map[task_name][state]['action']

            if  action is None:
                self.verbose('            Action: No action for task %s in state %s\n' % (task_name, state))
            else:
                res_action = action(t)
                if self.projectname == 'kernel-sru-workflow' and res_action:
                    performReleaseTest = True

        # Now process any tests which require information from multiple tasks
        # will require info stored in class variables during task processing
        if performReleaseTest:
            self.perform_release_test()

        # Now flush any property changes to the bug description
        self.props.flush()
        self.verbose('--\n')

        return

    def bug_url(self, bug_id):
        if self.args.staging:
            lpserver = 'bugs.qastaging.launchpad.net'
        else:
            lpserver = 'bugs.launchpad.net'
        retval = 'https://%s/bugs/%s' % (lpserver, bug_id)
        return retval

    def send_comment(self, taskobj, subject, body):
        """
        Add comment to tracking bug
        """
        self.verbose('        ')
        if self.args.dryrun:
            self.verbose('Dryrun - Adding comment to tracking bug\n')
        else:
            self.verbose('Adding comment to tracking bug\n')
            taskobj.bug.add_comment(body, subject)

    def send_email(self, taskobj, subject, body, to_address=None):
        """
        Send email to the configured list or recipient
        """
        if self.args.dryrun:
            self.verbose('Dryrun - Sending email\n')
            return

        self.verbose('Sending email\n')

        if not 'mail_notify' in self.cfg:
            self.verbose('No mail_notify config found, can\'t send email\n')
            return

        mcfg = self.cfg['mail_notify']
        if not to_address:
            to_address = mcfg['to_address']
        body_top = 'The following message is regarding the following Kernel SRU Tracking bug:\n%s\n' % self.bug_url(taskobj.bug.id)
        body_top = body_top + ('%s\n\n' % self.wfb.title)
        msg = body_top + body
        subj =  '[ShankBot] ' + subject
        self.email.send(mcfg['from_address'], to_address, subj, msg)
        return

    def has_new_abi(self):
        tasks_abi = [ 'prepare-package-lbm', 'prepare-package-lrm',
                      'prepare-package-lum', 'prepare-package-meta',
                      'prepare-package-ports-meta' ]
        for taskname in tasks_abi:
            if taskname in self.taskbyname:
                if self.taskbyname[taskname].status != "Fix Released":
                    return False
        return True

    def send_upload_announcement(self, task, pocket):
        """
        Send email with upload announcement
        """
        self.verbose('        ')
        if self.args.dryrun:
            self.verbose('Dryrun - Sending upload announcement\n')
            return
        self.verbose('Sending upload announcement\n')

        from_addr = None
        if 'mail_notify' in self.cfg:
            if 'from_address' in self.cfg['mail_notify']:
                from_addr = self.cfg['mail_notify']['from_address']
        if not from_addr:
            self.verbose('        ')
            self.verbose('No valid email config found, can\'t'
                         ' send upload announcement\n')
            return

        dest  = "kernel-team@lists.ubuntu.com"
        dest += ", ubuntu-installer@lists.ubuntu.com"
        dest += ", gema.gomez-solano@canonical.com"
        if 'upload_announce_to' in self.cfg:
            for addr in self.cfg['upload_announce_to']:
                dest += ", %s" % (addr)

        bug = task.bug
        series = self.ubuntu.series_name(self.wfb.pkg_name, self.wfb.pkg_version)
        abi_bump = self.has_new_abi()

        subj = "[" + series + "] " + self.wfb.pkg_name + " " + self.wfb.pkg_version + " uploaded"
        if abi_bump:
            subj += " (ABI bump)"

        msg  = "A new " + series + " kernel has been uploaded into "
        msg += pocket + ". "
        if abi_bump:
            msg += "Note the ABI bump. "
        msg += "\nThe full changelog about all bug fixes contained in this "
        msg += "upload can be found at:\n\n"
        msg += "https://launchpad.net/ubuntu/" + series + "/+source/"
        msg += self.wfb.pkg_name + "/" + self.wfb.pkg_version + "\n\n"
        msg += "-- \nThis message was created by an automated script,"
        msg += " maintained by the\nUbuntu Kernel Team."

        self.email.send(from_addr, dest, subj, msg)
        return

    def send_status_update(self, taskobj, message):
        """
        Send a status update to twitter, status.net, identi.ca, etc
        """
        self.verbose('        ')
        if self.args.dryrun:
            self.verbose('Dryrun - Sending Status\n')
            return

        self.verbose('Sending Status\n')

        bugurl = quote(self.bug_url(taskobj.bug.id))

        kinfo = self.ubuntu.lookup(self.wfb.pkg_version.split('-')[0])
        series_name = kinfo['name']
        pkgid = '%s package %s %s ' % (series_name, self.wfb.pkg_name, self.wfb.pkg_version)

        self.status.update(bugurl + ' : ' + pkgid + ' ' + message)
        return

    def set_task_assignee(self, taskname, assignee):
        """
        Assign the task for the given assignee
        returns True if we changed the state and False if it was already at the desired state
        """
        if self.args.dryrun:
            self.verbose('        ')
            self.verbose('Dryrun - Assign task %s to %s\n' % (taskname, assignee))
            return

        # TODO could add error handling and retries here if needed
        new_assignee = None
        current_assignee = self.taskbyname[taskname].assignee
        if current_assignee and current_assignee.username != assignee.name:
            new_assignee = assignee
        elif not current_assignee:
            new_assignee = assignee
        if new_assignee:
            print('        Assigning Task <%s> to <%s>' % (taskname, assignee))
            self.taskbyname[taskname].assignee = assignee
            return True
        else:
            self.verbose('        ')
            self.verbose('Task <%s> already assigned to <%s>\n' % (taskname, assignee))
            return False

    def set_task_to_state(self, taskname, state):
        """
        Set a task with a given name to the desired state
        returns True if we changed the state and False if it was already at the desired state
        """
        if self.args.dryrun:
            self.verbose('        ')
            self.verbose('Dryrun - Set task %s to state %s\n' % (taskname, state))
            return

        self.verbose('        Setting %s to %s\n' % (taskname, state), 'red')
        # TODO could add error handling and retries here if needed
        if self.taskbyname[taskname].status != state:
            print('        Setting Task <%s> to State <%s>' % (taskname, state))
            self.taskbyname[taskname].status = state
            return True
        else:
            self.verbose('        ')
            self.verbose('Task <%s> already in state <%s>\n' % (taskname, state))
            return False

    # set_tagged_timestamp
    #
    """
    Add the supplied key with a timestamp. We do not replace existing keys
    """
    def set_tagged_timestamp(self, taskobj, keyvalue):
        bug = taskobj.bug
        self.verbose('        ')
        if keyvalue in bug.properties:
            self.verbose('tagged timestamp <%s> already in the tracking bug, not replacing\n' % keyvalue)
            return
        if self.args.dryrun:
            self.verbose('Dryrun - Adding tagged timestamp <%s> to tracking bug\n' % keyvalue)
            return
        else:
            self.verbose('Adding tagged timestamp <%s> to tracking bug\n' % keyvalue)

            now = datetime.utcnow()
            now.replace(tzinfo=None)
            tstamp = date_to_string(now)
            props = {keyvalue:tstamp}
            self.props.set(props)

    # set_phase
    #
    """
    Add the phase we're entering as a 'property',
    along with a time stamp
    """
    def set_phase(self, taskobj, phasetext):
        bug_prop = 'kernel'
        if self.projectname == 'kernel-sru-workflow':
            bug_prop += '-stable'
        bug_prop += '-phase'
        bug_prop_chg = bug_prop + '-changed'
        # We have to check here to see whether the same status is already set,
        # or we will overwrite the timestamp needlessly
        if bug_prop in taskobj.bug.properties:
            if taskobj.bug.properties[bug_prop] == phasetext:
                # we already have this one
                self.verbose('        ')
                self.verbose('Not overwriting identical phase property\n')
                return
        # Handle dryrun mode
        self.verbose('        ')
        if self.args.dryrun:
            self.verbose('Dryrun - Changing bug phase to <%s>\n' % phasetext)
            return
        else:
            self.verbose('Changing bug phase to <%s>\n' % phasetext)
        # Add phase and time stamp
        now = datetime.utcnow()
        now.replace(tzinfo=None)
        tstamp = date_to_string(now)
        props = {bug_prop:phasetext, bug_prop_chg:tstamp}
        self.props.set(props)

    #
    # Begin action methods for state transitions
    #

    # master_bug_property_name
    #
    @property
    def master_bug_property_name(s):
        retval = 'kernel'
        if s.projectname == 'kernel-sru-workflow':
            retval += '-stable'
        retval += '-master-bug'
        return retval

    # is_derivative_package
    #
    def is_derivative_package(s, bug):
        return s.master_bug_property_name in bug.properties

    # master_bug
    #
    def master_bug(s, bug):
        '''
        Find the 'master' bug of which this is a derivative and return that bug.
        '''
        return s.lp.get_bug(bug.properties[s.master_bug_property_name])

    # check_master_task
    #
    def check_master_task(s, bug, tasks):
        """
        check if the dictionary of tasks is in one of the provided list of
        status on the master bug listed in the bug, returns:
        * -1 if we were unable to check the status
        * 0 if the task on the master tracking bug is not Confirmed/ Fix Released
        * 1 if this isn't a derivative (doesn't have a master tracking bug
        * 2 if the task on the master tracking bug is Confirmed or Fix Released
        The tasks provided must be a dictionary in the form:
            'task name' : [ list of desired status ]
        """
        master_bug_missing     = -1
        master_bug_bad_status  = 0
        master_bug_good_status = 2
        not_derivative         = 1

        retval = not_derivative
        if s.is_dervative_package(bug):
            try:
                master = s.master_bug

                retval = master_bug_good_status
                for task in master.tasks:
                    task_name = task.bug_target_name

                    if (not task_name.startswith(s.projectname) or task_name == s.projectname):
                        continue

                    short_name = task_name[len(s.projectname)+1:].strip()
                    for tname in iter(tasks):
                        if short_name.lower() == tname:
                            if not task.status in tasks[tname]:
                                retval = master_bug_bad_status
                                s.verbose("%s doesn't match any of these " "status in bug %s: %s." % (tname, master.id, tasks[tname]))
                                s.verbose(" Waiting on master bug\n")
                            return retval
            except:
                traceback.print_exc()
                print("ERROR: Unable to get the master bug\n")
                retval = master_bug_missing

        return retval

    def prepare_package_fixed(self):
        """
        Check if all prepare-package tasks are finished, returning a
        boolean value indicating so
        """
        for task in iter(self.taskbyname):
            if task.startswith('prepare-package'):
                if (self.taskbyname[task].status != 'Fix Released' and
                    self.taskbyname[task].status != 'Invalid'):
                    return False
        return True

    def upload_to_ppa_confirmed(self, taskobj):
        self.set_phase(taskobj, 'ReadyToBePackaged')
        return True

    def prep_package_fix_released(self, taskobj):
        """
        when the prep-package task is set to Fix Released and there is
        no upload-to-ppa task, we create new tracking bugs for
        derivative packages, and set the promote-to-proposed task to
        Confirmed. Otherwise, if upload-to-ppa task is present, just set
        it to Confirmed if necessary
        """
        self.verbose('            prep_package_fix_relesed\n', 'blue')  # FIXME bjf - debugging

        if self.projectname == 'kernel-sru-workflow':
            taskname = 'promote-to-proposed'
        else:
            taskname = 'package-testing'

        self.verbose('                %s status: %s\n' % (taskname, self.taskbyname[taskname].status), 'blue')  # FIXME bjf - debugging

        # Even though we came in here do to one of the prepare-package* tasks being
        # set to 'Fix Released' we don't actually do anything unless the next state
        # (promote-to-proposed or package-testing) is 'New'.
        #
        if self.taskbyname[taskname].status == 'New':
            # check if all prepare-package tasks are finished
            if not self.prepare_package_fixed():
                self.verbose('                prepare_package_fixed: false\n', 'blue')  # FIXME bjf - debugging
                return False

            # if this is a derivative tracking bug, first wait until
            # that packages on the master tracking bug are also ready or
            # already promoted. The way derivative package bugs are
            # opened already ensures this, but check the tasks on the
            # master bug anyway just in case...
            tsk_st = {
                'prepare-package'            : [ 'Fix Released' ],
                'prepare-package-lbm'        : [ 'Fix Released', 'Invalid' ],
                'prepare-package-lrm'        : [ 'Fix Released', 'Invalid' ],
                'prepare-package-lum'        : [ 'Fix Released', 'Invalid' ],
                'prepare-package-meta'       : [ 'Fix Released', 'Invalid' ],
                'prepare-package-ports-meta' : [ 'Fix Released', 'Invalid' ],
                'prepare-package-signed'     : [ 'Fix Released' ],
                taskname                     : [ 'Confirmed', 'Fix Released' ]
            }
            # If the master bug's tasks are not completely ready.
            #
            if self.check_master_task(taskobj.bug, tsk_st) <= 0:
                self.verbose('                check_master_task: false\n', 'blue')  # FIXME bjf - debugging
                return False

            # open new tracking bugs for derivative packages if needed
            series = self.ubuntu.series_name(self.wfb.pkg_name, self.wfb.pkg_version)
            if not series:
                print("ERROR: Can't find series for %s-%s to get derivatives\n" % (self.wfb.pkg_name, self.wfb.pkg_version))
                return False

            der_list = []
            record = self.ubuntu.lookup(series)
            if 'derivative-packages' in record:
                if self.wfb.pkg_name in record['derivative-packages']:
                    der_list = record['derivative-packages'][self.wfb.pkg_name]
            bp_list = []
            for entry in self.ubuntu.db.itervalues():
                if 'backport-packages' in entry:
                    bp_entries = entry['backport-packages']
                    for bp_entry in iter(bp_entries):
                        if (bp_entries[bp_entry][0] == self.wfb.pkg_name and bp_entries[bp_entry][1] == record['series_version']):
                            bp_list.append([bp_entry, entry['name']])

            der_bug_list = []
            bp_bug_list  = []
            m_bug_list   = []

            tb = TrackingBug(self.lp, self.args.staging)
            for der_pkg in der_list:
                if self.args.dryrun:
                    self.verbose('        ')
                    self.verbose('Dryrun - Would open tracking bug for derivative package %s\n' % (der_pkg))
                    continue
                try:
                    print('        ')
                    bug = tb.open(der_pkg, '<version to be filled>', True, taskobj.bug.id, series)
                except:
                    traceback.print_exc()
                    bug = None
                if bug:
                    # Friendly comment on the bug stating that this is a derivative
                    msgder =  "This tracking bug was opened to be worked from "
                    msgder += "%s-%s update (bug %s)" % (self.wfb.pkg_name, self.wfb.pkg_version, taskobj.bug.id)
                    subder =  "Derivative package tracking bug"
                    bug.add_comment(msgder, subder)
                    print '        Action: Opened tracking bug %s for derivative package %s\n' % (bug.id, der_pkg)
                    der_bug_list.append([der_pkg, bug.id])
                else:
                    m_bug_list.append('%s' % (der_pkg))

            for bp_pkg in bp_list:
                if self.args.dryrun:
                    self.verbose('        ')
                    self.verbose('Dryrun - Would open tracking bug for backport package %s\n' % (bp_pkg[0]))
                    continue
                try:
                    bug = tb.open(bp_pkg[0], '%s~%s1' % (self.wfb.pkg_version, bp_pkg[1]), self.has_new_abi(), taskobj.bug.id)
                except:
                    traceback.print_exc()
                    bug = None
                if bug:
                    print('        Action: Opened tracking bug %s for backport package %s (%s)\n' % (bug.id, bp_pkg[0], bp_pkg[1]))
                    bp_bug_list.append([bp_pkg[0], bp_pkg[1], bug.id])
                else:
                    m_bug_list.append('%s (%s)' % (bp_pkg[0], bp_pkg[1]))

            # comment about publishing and possible new tracking bugs opened
            msgbody  = 'All builds are complete, packages in this bug'
            if taskname == 'promote-to-proposed':
                msgbody += ' can be copied to -proposed.'
            else:
                msgbody += ' are available in -proposed.'
            if der_bug_list:
                msgbody += '\n\nDerivative packages from packages here can be worked on,'
                msgbody += ' the following tracking bugs were opened for them:'
                for pkg_bug in der_bug_list:
                    msgbody += '\n%s - bug %s' % (pkg_bug[0], pkg_bug[1])
            if bp_bug_list:
                msgbody += '\n\nBackport packages from packages here can be worked on,'
                msgbody += ' the following tracking bugs were opened for them:'
                for pkg_bug in bp_bug_list:
                    msgbody += '\n%s (%s) - bug %s' % (pkg_bug[0], pkg_bug[1], pkg_bug[2])
            if m_bug_list:
                msgbody += '\n\nIt was not possible to create or handle the'
                msgbody += ' tracking bugs for the following packages'
                msgbody += ' (their tracking bugs based on this update'
                msgbody += ' must be handled manually):'
                for ln in m_bug_list:
                    msgbody += '\n%s' % (ln)
            task = self.taskbyname[self.projectname]
            self.send_comment(task, 'Packages available', msgbody)

            # Set promote-to-proposed
            self.set_task_to_state(taskname, 'Confirmed')
            # Add time stamp and status
            if self.projectname == 'kernel-sru-workflow':
                self.set_tagged_timestamp(taskobj, 'kernel-stable-Prepare-package-end')
                self.set_tagged_timestamp(taskobj, 'kernel-stable-Promote-to-proposed-start')
                self.set_phase(taskobj, 'CopyToProposed')
            else:
                self.set_tagged_timestamp(taskobj, 'kernel-Prepare-package-end')
                self.set_tagged_timestamp(taskobj, 'kernel-Package-testing-start')
                self.set_phase(taskobj, 'Testing')
                self.send_upload_announcement(taskobj, 'proposed')

                cmd = 'ssh zinc.canonical.com \'echo "<html>%s</html>" > /srv/kernel.ubuntu.com/www/kernel-pkg-status/%s.html\'' % (self.wfb.title, series)
                status, result = run_command(cmd)

        return False

    def build_status(self, series, package, release, abi, archive, pocket = ''):
        """
        Return an status code, the possible assignee responsible and the
        package creator related to the publishing of the package in the
        given archive on the optionally specified pocket (if we want the
        check to be restricted on a specific pocket). The following
        values are returned as the status code:
        0 - if the package-version wasn't found/published. In this case
            the package creator and assignee returned is always None
        1 - if the package-version is available (published), but still
            didn't finish building
        2 - package-version is available in the archive
        The parameters are:
        series - the distribution series (quantal, oneiric, etc.)
        package - the package name
        release - the version or version-abi number to match
        abi_match - if provided, indicates that release is not an exact
                    version number, and we must do an ABI check
        archive - launchpad archive to look into
        pocket - optional, if we want only results of the archive from
                 the specified pocket
        """

        if pocket and not abi:
            ps = archive.getPublishedSources(distro_series=series,
                                             exact_match=True,
                                             source_name=package,
                                             status='Published',
                                             version=release,
                                             pocket=pocket)
        elif not pocket and not abi:
            ps = archive.getPublishedSources(distro_series=series,
                                             exact_match=True,
                                             source_name=package,
                                             status='Published',
                                             version=release)
        elif pocket and abi:
            ps = archive.getPublishedSources(distro_series=series,
                                             exact_match=True,
                                             source_name=package,
                                             status='Published',
                                             pocket=pocket)
        else:
            ps = archive.getPublishedSources(distro_series=series,
                                             exact_match=True,
                                             source_name=package,
                                             status='Published')
        matches = []
        if abi:
            dep_ver1 = '%s-%s' % (release, abi)
            dep_ver2 = '%s.%s' % (release, abi)
            rel_match = '<%s> or <%s>' % (dep_ver1, dep_ver2)
            for p in ps:
                src_ver = p.source_package_version
                # special case for hardy lrm version...
                if ((series.name == 'hardy') and
                    (package == 'linux-restricted-modules-2.6.24')):
                    if src_ver.startswith('2.6.24'):
                        ver_split = src_ver.split('-', 1)
                        if len(ver_split) > 1:
                            src_ver = '2.6.24-%s' % (ver_split[1])
                if ((src_ver.startswith(dep_ver1 + '.') or
                     src_ver.startswith(dep_ver2 + '.'))):
                    matches.append(p)
            if not matches:
                self.verbose('        ')
                self.verbose('Can\'t find <%s> (%s) build on %s (pocket:%s)\n' %
                             (package, rel_match, archive.displayname,
                              pocket))
                return 0, None
        else:
            rel_match = '<%s>' % (release)
            for p in ps:
                matches.append(p)
            if not matches:
                self.verbose('        ')
                self.verbose('Can\'t find <%s> %s build on %s (pocket:%s)\n' %
                             (package, rel_match, archive.displayname,
                              pocket))
                return 0, None
        res = 0, None
        lst_date = None
        for pkg in matches:
            src_id = str(pkg.self).rsplit('/', 1)[1]
            build_summaries = archive.getBuildSummariesForSourceIds(source_ids=[src_id])[src_id]
            if build_summaries['status'] == 'FULLYBUILT':
                self.verbose('        ')
                self.verbose('<%s> %s built (pocket:%s)\n'
                             % (package, rel_match, pocket))
                bs = 2
            else:
                self.verbose('        ')
                self.verbose('<%s> %s not fully built yet, skipping (pocket:%s)\n'
                             % (package, rel_match, pocket))
                bs = 1
            # prefer newer published items...
            if lst_date:
                if lst_date > pkg.date_published:
                    continue
            lst_date = pkg.date_published
            res = bs, pkg
        return res

    def package_check(self, bug):
        """
        Verify the required packages for this update, and determine its
        build status
        """
        # Get the source package names and required versions for this update
        if not self.wfb.pkg_name or not self.wfb.pkg_version:
            self.verbose('        Unable to check package builds for this bug:'
                         ' either the package name or\n        version are not'
                         ' properly available yet in the bug title.\n')
            return False
        pkg_mainver = re.findall('-[0-9]+[^ ]+', self.wfb.pkg_version)
        if pkg_mainver:
            pkg_mainver = self.wfb.pkg_version.replace(pkg_mainver[0], '', 1)
        if not pkg_mainver:
            self.verbose('        ')
            self.verbose('WARNING: unable to get main package version\n')
        pkg_abi = re.findall('-[0-9]+\.', self.wfb.pkg_version)
        if pkg_abi:
            pkg_abi = pkg_abi[0].lstrip('-').rstrip('.')
        else:
            self.verbose('        ')
            self.verbose('WARNING: unable to get ABI from package version\n')
        distro_series = None
        series = self.ubuntu.series_name(self.wfb.pkg_name, self.wfb.pkg_version)
        if series:
            sc = self.lp.launchpad.distributions["ubuntu"].series_collection
            for s in sc:
                if s.name == series:
                    distro_series = s
                    break
        if not distro_series:
            print("        ")
            print("ERROR: can't figure out the distro series for %s-%s\n"
                  % (self.wfb.pkg_name, self.wfb.pkg_version))
            return False
        pkgs = {}
        entry = self.ubuntu.lookup(series)
        if entry:
            if 'dependent-packages' in entry:
                if self.wfb.pkg_name in entry['dependent-packages']:
                    pkgs.update(entry['dependent-packages'][self.wfb.pkg_name])
        pkgs['main'] = self.wfb.pkg_name

        # Try to verify if there was an abi change in this release. We
        # guess this by looking if there is already a package with same
        # abi in the updates/release pocket.
        new_abi = True
        main_archive = self.lp.launchpad.distributions["ubuntu"].main_archive
        if pkg_mainver and pkg_abi:
            st_abi_rel, _ = self.build_status(distro_series, self.wfb.pkg_name,
                                             pkg_mainver, pkg_abi, main_archive,
                                             'Release')
            st_abi_upd, _ = self.build_status(distro_series, self.wfb.pkg_name,
                                             pkg_mainver, pkg_abi, main_archive,
                                             'Updates')
            if st_abi_rel == 2 or st_abi_upd == 2:
                new_abi = False

        # Check build status. This is really convoluted... due to number
        # of tasks and we wanting the better behaviour as possible
        promoted_to_updates = True
        promoted_to_security = True
        promoted_to_release = True
        pkg_security = None
        pkg_updates = None
        pkg_release = None
        task_status = [ 'New', 'In Progress', 'Fix Released' ]
        ckt = self.lp.launchpad.people['canonical-kernel-team']
        ckt_archive = ckt.getPPAByName(name='ppa')
        for dep in iter(pkgs):
            if pkgs[dep] == self.wfb.pkg_name:
                bug_task = 'prepare-package'
            else:
                bug_task = 'prepare-package-%s' % (dep)
            abi_num = None
            pkg_rel = self.wfb.pkg_version
            if dep in [ 'lbm', 'lrm', 'lum', 'meta', 'ports-meta' ] and pkg_abi:
                abi_num = pkg_abi
                pkg_rel = pkg_mainver
            status_updates = 0
            status_release = 0
            prepare_status = 0
            prepare_assignee = None
            prepare_uploader = None
            if self.projectname == 'kernel-sru-workflow':
                promoted_to_release = False
                status_ckt, pkg_ckt = self.build_status(distro_series,
                        pkgs[dep], pkg_rel, abi_num, ckt_archive)
                status_proposed, pkg_proposed = self.build_status(distro_series,
                        pkgs[dep], pkg_rel, abi_num, main_archive, 'Proposed')
                status_updates, pkg_updates = self.build_status(distro_series,
                        pkgs[dep], pkg_rel, abi_num, main_archive, 'Updates')
                status_security, pkg_security = self.build_status(distro_series,
                        pkgs[dep], pkg_rel, abi_num, main_archive, 'Security')
                if status_security != 2:
                    promoted_to_security = False
                if status_updates != 2:
                    promoted_to_updates = False
                for s in [ status_ckt, status_proposed, status_updates ]:
                    if s > prepare_status:
                        prepare_status = s
                for c in [ pkg_ckt, pkg_proposed, pkg_updates, pkg_security ]:
                    if c:
                        prepare_assignee = c.package_creator
                        prepare_uploader = c.package_signer
                        break
            else:
                promoted_to_updates = False
                promoted_to_security = False
                status_proposed, pkg_proposed = self.build_status(distro_series,
                        pkgs[dep], pkg_rel, abi_num, main_archive, 'Proposed')
                status_release, pkg_release = self.build_status(distro_series,
                        pkgs[dep], pkg_rel, abi_num, main_archive, 'Release')
                if status_release != 2:
                    promoted_to_release = False
                prepare_status = status_proposed
                if status_release > prepare_status:
                    prepare_status = status_release
                if pkg_proposed:
                    prepare_assignee = pkg_proposed.package_creator
                    prepare_uploader = pkg_proposed.package_signer
                elif pkg_release:
                    prepare_assignee = pkg_release.package_creator
                    prepare_uploader = pkg_release.package_signer
            # When things are moved from one pocket to another, things
            # may be unavailable for some time, and we may think no
            # packages were built. Thus we add a tagged timestamp,
            # marking the time when we detect that the builds are
            # missing. If after 1 hour the builds are still unavailable,
            # then we allow to reset the tasks.
            prop = 'kernel-%s-build-unavailable' % (dep)
            if (self.taskbyname[bug_task].status == 'Fix Released' and
                prepare_status != 2):
                self.set_tagged_timestamp(self.taskbyname[bug_task], prop)
                if not prop in bug.properties:
                    continue
                date_str = bug.properties[prop]
                timestamp = datetime.strptime(date_str, '%A, %d. %B %Y %H:%M UTC')
                delta = DeltaTime(timestamp, datetime.utcnow())
                if delta.hours < 1:
                    self.verbose('        ')
                    self.verbose('Builds gone for %s, waiting 1 hour to reset tasks\n'
                                 % (bug_task))
                    continue
            if prop in bug.properties:
                self.props.set({prop:None})
            new_status = self.taskbyname[bug_task].status
            if abi_num:
                if new_abi:
                    new_status = task_status[prepare_status]
                else:
                    if new_status != 'Invalid' and new_status != 'Fix Released':
                        new_status = 'Invalid'
            else:
                new_status = task_status[prepare_status]
            if prepare_assignee and new_status != 'Invalid':
                self.set_task_assignee(bug_task, prepare_assignee)

            self.set_task_to_state(bug_task, new_status)
            # Take care of the upload-to-ppa task if needed
            if dep == 'main' and 'upload-to-ppa' in self.taskbyname:
                if prepare_uploader:
                    self.set_task_assignee('upload-to-ppa', prepare_uploader)
                if prepare_status >= 1:
                    self.set_task_to_state('upload-to-ppa', 'Fix Released')
                elif self.taskbyname['upload-to-ppa'].status != 'Confirmed':
                    self.set_task_to_state('upload-to-ppa', 'New')

        # Set promotion bug tasks
        if promoted_to_security:
            if pkg_security:
                self.set_task_assignee('promote-to-security',
                                       pkg_security.creator)
            self.set_task_to_state('promote-to-security', 'Fix Released')
        #else:
            # TODO: verify promote-to-security task state
        if promoted_to_updates:
            if pkg_updates:
                self.set_task_assignee('promote-to-updates',
                                       pkg_updates.creator)
            self.set_task_to_state('promote-to-updates', 'Fix Released')
        #else:
            # TODO: verify promote-to-updates task state
        if promoted_to_release:
            if pkg_release:
                self.set_task_assignee('promote-to-release',
                                       pkg_release.creator)
            self.set_task_to_state('promote-to-release', 'Fix Released')
        #else:
            # TODO: verify promote-to-updates task state

        return True

    def has_prep_task(self, taskname):
        if taskname in self.taskbyname:
            if self.taskbyname[taskname].status == "Fix Released":
                return True
        return False

    def check_component_in_pocket(self, taskobj, tstamp_prop, dt_utcnow, pocket):
        """
        Check if packages for the given tracking bug were properly copied
        to the right component in the given pocket.
        """
        bug = taskobj.bug

        # Set promote-to-proposed timestamp first, used for checking below
        self.set_tagged_timestamp(taskobj, tstamp_prop)

        # Wait publishing tasks to complete. Usually archive admin sets
        # the promote-to-<pocket> task to Fix Released right away after
        # doing the copy, but actual publishing takes more time. It's
        # said that the publishing should take at most 1 hour to
        # complete, but could be a bit more in some cases, or could
        # vary. Anyway, just wait arbitrarily 1 hour before we do the
        # actual processing, to avoid sru-workflow-manager to complain
        # about packages in wrong component while real copying/publishing
        # still didn't finish
        if tstamp_prop in bug.properties:
            date_str = bug.properties[tstamp_prop]
            timestamp = datetime.strptime(date_str, '%A, %d. %B %Y %H:%M UTC')
            delta = DeltaTime(timestamp, dt_utcnow)
            if delta.hours < 1:
                self.verbose('Waiting 1 hour after promote-to-%s was Fix Released\n'
                             % (pocket))
                return False
        else:
            return False

        # Do the checking for proper packages in pocket->component
        series_name = self.ubuntu.series_name(self.wfb.pkg_name, self.wfb.pkg_version)
        check_component = CheckComponent(self.lp)
        name_meta = 'linux-meta'
        name_ports_meta = 'linux-ports-meta'
        name_signed = 'linux-signed'
        name_split = self.wfb.pkg_name.split('-', 1)
        if len(name_split) > 1:
            name_meta = '%s-meta-%s' % (name_split[0], name_split[1])
            name_ports_meta = '%s-ports-meta-%s' % (name_split[0], name_split[1])
            name_signed = '%s-signed-%s' % (name_split[0], name_split[1])
        name_map = { 'prepare-package-lbm' : 'linux-backports-modules',
                     'prepare-package-lrm' : 'linux-restricted-modules',
                     'prepare-package-lum' : 'linux-ubuntu-modules',
                     'prepare-package-meta' : name_meta,
                     'prepare-package-ports-meta' : name_ports_meta,
                     'prepare-package-signed' : name_signed }
        ver_split = self.wfb.pkg_version.split('-')
        main_version = ver_split[0]
        pkg_list = [ self.wfb.pkg_name ]
        for name in iter(name_map):
            if self.has_prep_task(name):
                if ('lbm' in name) or ('lrm' in name) or ('lum' in name):
                    pkg_list.append('%s-%s' % (name_map[name], main_version))
                else:
                    pkg_list.append(name_map[name])
        missing_pkg = []
        pkg_abi = ''
        dep_ver1 = main_version
        dep_ver2 = main_version
        if len(ver_split) > 1:
            pkg_abi = ver_split[1].split('.')[0]
            dep_ver1 = '%s-%s' % (main_version, pkg_abi)
            dep_ver2 = '%s.%s' % (main_version, pkg_abi)
        mis_lst = []
        for pkg in pkg_list:
            if pkg == self.wfb.pkg_name:
                check_ver = self.wfb.pkg_version
            else:
                check_ver = None
            ps = check_component.get_published_sources(series_name, pkg,
                                                       check_ver, pocket)
            if not ps:
                if check_ver:
                    missing_pkg.append([pkg, check_ver])
                elif pkg == name_signed:
                    missing_pkg.append([pkg, 'for version=%s' % (self.wfb.pkg_version)])
                else:
                    missing_pkg.append([pkg, 'with ABI=%s' % (pkg_abi)])
                continue
            if pkg == name_signed:
                src_ver = ps[0].source_package_version
                if src_ver.startswith(self.wfb.pkg_version):
                    mis_lst.extend(check_component.mismatches_list(series_name,
                                   pkg, ps[0].source_package_version,
                                   pocket, ps))
                else:
                    missing_pkg.append([pkg, 'for version=%s' % (self.wfb.pkg_version)])
            elif not check_ver:
                src_ver = ps[0].source_package_version
                # special hardcoded case for lrm on hardy...
                if pkg == 'linux-restricted-modules-2.6.24':
                    src_split = src_ver.split('-')
                    if src_split[0].startswith(main_version) and len(src_split) > 1:
                        src_ver = '%s-%s' % (main_version, src_split[1])
                if src_ver.startswith(dep_ver1) or src_ver.startswith(dep_ver2):
                    mis_lst.extend(check_component.mismatches_list(series_name,
                                   pkg, ps[0].source_package_version,
                                   pocket, ps))
                else:
                    missing_pkg.append([pkg, 'with ABI=%s' % (pkg_abi)])
            else:
                mis_lst.extend(check_component.mismatches_list(series_name,
                               pkg, check_ver, pocket, ps))
        if not missing_pkg:
            if mis_lst:
                self.set_task_to_state('promote-to-%s' % (pocket), 'Incomplete')
                msgbody  = "The following packages ended up in the wrong"
                msgbody += " component in the -%s pocket:\n" % (pocket)
                for item in mis_lst:
                    msgbody += '\n%s %s - is in %s instead of %s' % (item[0],
                               item[1], item[2], item[3])
                bugbody = msgbody
                bugbody += "\n\nOnce this is fixed, set the "
                bugbody += "promote-to-%s to Fix Released again" % (pocket)
                self.send_comment(taskobj, 'Packages outside of proper component', bugbody)
                if not self.args.dryrun:
                    self.props.set({tstamp_prop:None})
                self.send_email(taskobj, '[bug %s] Packages copied to the wrong component'
                                % (bug.id), msgbody)
                return False
        else:
            # Even if we already waited 1 hour, wait more (1 day) before
            # complaining if we don't find the packages published to
            # the pocket, in case the copy/publishing take more hours
            # after promote-to-<pocket> is set to Fix Released the first
            # time
            if delta.days >= 1:
                self.set_task_to_state('promote-to-%s' % (pocket), 'Incomplete')
                msgbody  = "Promote-to-%s is Fix Released, but " % (pocket)
                msgbody += "some packages for this update aren't published "
                msgbody += "in Launchpad, on -%s pocket:\n" % (pocket)
                for item in missing_pkg:
                    msgbody += '\n%s %s' % (item[0], item[1])
                self.send_comment(taskobj, 'Can\'t find packages published in -%s' %
                                  (pocket), msgbody)
                if not self.args.dryrun:
                    self.props.set({tstamp_prop:None})
                return False
            for item in missing_pkg:
                self.verbose('Didn\'t found <%s> <%s> on -%s yet, check on next run\n'
                             % (item[0], item[1], pocket))
            return False

        return True

    def promote_to_proposed_fix_released(self, taskobj):
        """
        When promote-to-proposed is set to Fix Released, we begin verification testing by setting
        verification-testing to In Progress, add tags to the bugs, and spam with text
        """
        # Exit if processed already
        task = self.taskbyname['verification-testing']
        if task.status != 'New':
            return False

        # Check if packages were copied to the right pocket->component
        if not self.check_component_in_pocket(taskobj,
                'kernel-stable-Promote-to-proposed-end',
                datetime.utcnow(), 'proposed'):
            return False

        # Update remaining time stamps and status, send announcement
        self.set_tagged_timestamp(taskobj, 'kernel-stable-Verification-testing-start')
        self.set_phase(taskobj, 'Verification')
        self.set_task_to_state('verification-testing', 'In Progress')
        self.send_upload_announcement(taskobj, 'proposed')

        # Now tag all bugs verification-needed and spam with a comment
        # Automate this in the future but for now send an email
        print self.printlink,
        print 'Here is where we would tag and spam the verification bugs'
        return False

    def verification_testing_fix_released(self, taskobj):
        """
        When verification-testing is set to Fix Released, we set three tasks to Confirmed.
        These are certification-testing, regression-testing, and security-signoff
        """
        # Add time stamp and status
        if ((self.taskbyname['certification-testing'].status != 'Fix Released' and
             self.taskbyname['certification-testing'].status != 'Invalid') or
            (self.taskbyname['security-signoff'].status != 'Fix Released' and
             self.taskbyname['security-signoff'].status != 'Invalid') or
            (self.taskbyname['regression-testing'].status != 'Fix Released' and
             self.taskbyname['regression-testing'].status != 'Invalid')):
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Verification-testing-end')
            self.set_phase(taskobj, 'Testing')

        if self.taskbyname['certification-testing'].status == 'New':
            self.set_task_to_state('certification-testing', 'Confirmed')
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Certification-testing-start')
        if self.taskbyname['regression-testing'].status == 'New':
            self.set_task_to_state('regression-testing', 'Confirmed')
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Regression-testing-start')
        if self.taskbyname['security-signoff'].status == 'New':
            self.set_task_to_state('security-signoff', 'Confirmed')
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Security-signoff-start')
        return False

    def certification_testing_fix_released(self, taskobj):
        """
        When certification-testing is set to Fix Released, we check the tags
        If tagged certification-testing-failed then we alert people
        If certification-testing-passed then we save the tag and state and trigger
        running of the test to see if we're ready for publishing
        """
        if 'certification-testing-failed' in self.bugtags:
            self.verbose('Certification tagged as FAIL\n')
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Certification-testing-end')
            # Send email and possibly a status update -spc- TODO
            msgbody = 'The bug was tagged as certification-testing-failed\n'
            self.send_comment(taskobj, 'Certification FAILURE', msgbody)
            # stop further processing by this bot
            self.set_task_to_state(self.projectname, 'Incomplete')
            self.set_phase(taskobj, 'TestFail')
            return False
        elif 'certification-testing-passed' in self.bugtags:
            self.verbose('Certification tagged as PASSED\n')
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Certification-testing-end')
            # TODO send a status.net update?
            self.certification_testing_complete = True
            return True
        else:
            self.verbose('certification-testing task set to Fix Released but no status tag!\n')
            # Send email and possibly a status update -spc- TODO
            msgbody = 'The certification-testing task was set to Fix Released but neither the certification-testing-passed or certification-testing-failed tag was applied\n'
            self.send_comment(taskobj, 'Certification completed but no status tags applied', msgbody)
            # reset task state so Certification team fixes it
            self.set_task_to_state('certification-testing', 'Incomplete')
            return False

    def certification_testing_invalid(self, taskobj):
        """
        When certification-testing is set to Invalid, this indicates
        that certification testing will not be performed on this release.
        We consider the task to be 'done' in that we trigger a release test,
        but we don't check any tags
        """
        self.certification_testing_complete = True
        self.set_tagged_timestamp(taskobj, 'kernel-stable-Certification-testing-end')
        return True

    def regression_testing_invalid(self, taskobj):
        """
        When regression-testing is Invalid, it means we want to skip
        testing for that update. So just ignore and return the value to
        perform the release test
        """
        self.regression_testing_complete = True
        return True

    def regression_testing_fix_released(self, taskobj):
        """
        When regression-testing is set to Fix Released, we check the tags
        If tagged qa-testing-failed then we alert people
        If qa-testing-passed then we save the tag and state and trigger
        running of the test to see if we're ready for publishing
        """
        if 'qa-testing-failed' in self.bugtags:
            self.verbose('Regression Testing tagged as FAIL\n')
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Regression-testing-end')
            # Send email and possibly a status update -spc- TODO
            msgbody = 'The bug was tagged as qa-testing-failed\n'
            self.send_comment(taskobj, 'Regression Testing FAILURE', msgbody)
            # stop further processing by this bot
            self.set_task_to_state(self.projectname, 'Incomplete')
            self.set_phase(taskobj, 'TestFail')
            return False
        elif 'qa-testing-passed' in self.bugtags:
            self.verbose('Regression Testing tagged as PASSED\n')
            self.set_tagged_timestamp(taskobj, 'kernel-stable-Regression-testing-end')
            # TODO send a status.net update?
            self.regression_testing_complete = True
            return True
        else:
            self.verbose('regression-testing task set to Fix Released but no status tag!\n')
            # Send email and possibly a status update -spc- TODO
            msgbody = 'The regression-testing task was set to Fix Released but neither the qa-testing-passed or qa-testing-failed tag was applied\n'
            self.send_comment(taskobj, 'Regression Testing completed but no status tags applied', msgbody)
            # reset task so QA team can fix it
            self.set_task_to_state('regression-testing', 'Incomplete')
            # stop further processing by this bot
            self.set_task_to_state(self.projectname, 'Incomplete')
            self.set_phase(taskobj, 'OnHold')
            return False

    def package_testing_fix_released(self, taskobj):
        """
        When package-testing is set to Fix Released, that means the
        development kernel passed all wanted testing and is acked to go
        to the release pocket by the Ubuntu Kernel Team
        """
        if self.taskbyname['promote-to-release'].status == 'New':
            # if this is a derivative tracking bug, first wait until
            # that packages on the master tracking bug are also ready or
            # already promoted. The way derivative package bugs are
            # opened already ensures this, but check the tasks on the
            # master bug anyway just in case...
            tsk_st = { 'promote-to-release' : [ 'Confirmed', 'Fix Released' ] }

            # If the master bug's tasks are not completely ready.
            #
            if self.check_master_task(taskobj.bug, tsk_st) <= 0:
                return False

            # Set promote-to-proposed
            self.set_task_to_state('promote-to-released', 'Confirmed')
            # Add time stamp and status
            self.set_tagged_timestamp(taskobj, 'kernel-Package-testing-end')
            self.set_tagged_timestamp(taskobj, 'kernel-Promote-to-release-start')
            self.set_phase(taskobj, 'CopyToRelease')
        return False

    def promote_to_release_fix_released(self, taskobj):
        """
        When promote-to-release is set to Fix Released, the development
        kernel is copied to the -release pocket, marking the end of the
        workflow for it. Some final checks are done here to verify that
        everything is ok
        """

        # Ensure all tasks are closed
        if not self.prepare_package_fixed():
            return
        if (self.taskbyname['package-testing'].status != 'Fix Released' or
            self.taskbyname['package-testing'].status != 'Invalid'):
            self.taskbyname['package-testing'].status = "Won't Fix"

        # Do we halted processing?
        if (self.taskbyname[self.projectname].status != 'In Progress'):
            self.verbose('*** promote-to-release halted on bug with status!=In Progress\n')
            return

        if not self.check_component_in_pocket(taskobj,
                    'kernel-Promote-to-release-end', datetime.utcnow(),
                    'release'):
            return False

        self.set_task_to_state(self.projectname, 'Fix Released')
        self.set_phase(taskobj, 'Released')
        msgbody = 'The package has been published and the bug is being set to Fix Released\n'
        self.send_comment(taskobj, 'Package Released!', msgbody)
        self.send_status_update(taskobj, 'has been published.')

    def security_signoff_finished(self, taskobj):
        """
        When security-signoff is set to either Invalid or Fix Released, it is done.
        If set to Fix Released, we set a flag to indicate that the package must
        be copied to the -security pocket.
        """
        self.security_signoff_complete = True
        self.set_tagged_timestamp(taskobj, 'kernel-stable-Security-signoff-end')
        # Trigger the release test
        return True

    def release_test_state_check(self, taskname, desired_state_list):
        taskobj = self.taskbyname[taskname]
        if taskobj.status not in desired_state_list:
            self.verbose('ERROR: %s task set to Unexpected state!\n' % taskname)
            # Send email and possibly a status update
            msgbody = 'The %s task was not set to one of the following states during the release test:\n' % taskname
            for statename in desired_state_list:
                msgbody = msgbody + statename + ', '
            msgbody = msgbody + '\n'
            msgbody = msgbody + '%s task was set to state %s\n' % (taskname, taskobj.status)
            msgbody = msgbody + 'Further processing of this bug by Workflow Manager is halted.\n'
            self.send_comment(taskobj, '%s task not set to correct state during release test' % taskname, msgbody)
            # stop further processing by this bot
            self.set_task_to_state(self.projectname, 'Incomplete')

    def hold_updates_security_copy(self):
        """
        The security team wants to avoid updates being copied to
        security/updates on Friday before the weekend. If there is some
        last minute crisis/regression on the kernel copied to
        -updates/-security, there are little resources to deal with this
        on the weekend. Also USN processing may be affected the by time
        of the kernel release. It was agreed that we should delay kernel
        copying to -updates/-security if we are between 1800UTC Fri -
        2100UTC Sun, this function is used to check that so we delay
        setting the promote to -updates/-security tasks to Confirmed.
        """
        now = datetime.utcnow()
        wday = now.weekday()
        if wday == 5:
            return True
        if wday == 4 and now.hour >= 18:
            return True
        if wday == 6 and now.hour < 21:
            return True
        return False

    #
    # This is not performed during processing for a specific task but only if several tasks are
    # in the correct state
    #
    # perform_release_test
    #
    def perform_release_test(self):
        """
        Check results from multiple tasks to see whether release
        to -updates and -security are required
        """
        self.verbose('*** Performing release test\n')

        # No need to do anything until these three are all complete
        if (self.certification_testing_complete and self.regression_testing_complete and self.security_signoff_complete):
            self.verbose('Cert and regression testing and security signoff all complete\n')

            # Some general sanity checks before we pull the lever to publish
            self.release_test_state_check('prepare-package', ['Fix Released'])
            self.release_test_state_check('promote-to-proposed', ['Fix Released'])
            self.release_test_state_check('verification-testing', ['Fix Released'])
            self.release_test_state_check('certification-testing', ['Invalid', 'Fix Released'])
            self.release_test_state_check('regression-testing', ['Invalid', 'Fix Released'])
            self.release_test_state_check('security-signoff', ['Invalid', 'Fix Released'])
            # confirmed is in the next two in case we rerun the release test after
            # a dumb failure like email send fail or something
            self.release_test_state_check('promote-to-security', ['New', 'Confirmed', 'Invalid', 'Incomplete', 'Fix Released'])
            self.release_test_state_check('promote-to-updates', ['New', 'Confirmed', 'Incomplete', 'Fix Released'])

            # If we found any problems, we've halted processing and set this
            if (self.taskbyname[self.projectname].status != 'In Progress' or
                self.taskbyname['promote-to-security'].status == 'Incomplete' or
                self.taskbyname['promote-to-updates'].status == 'Incomplete'):
                self.verbose('*** Exiting release test without triggering any publishing\n')
                return

            if ((self.taskbyname['promote-to-security'].status == 'Confirmed' or
                 self.taskbyname['promote-to-security'].status == 'Invalid') and
                self.taskbyname['promote-to-updates'].status == 'Confirmed'):
                self.verbose('*** Exiting release test, all set\n')
                return

            if self.taskbyname['security-signoff'].status == 'Fix Released':
                # publishing to security is required
                self.security_publishing_required = True

            # one last check for test results
            if ('qa-testing-passed' in self.bugtags or self.taskbyname['regression-testing'].status == 'Invalid') and \
                    ('certification-testing-passed' in self.bugtags or self.taskbyname['certification-testing'].status == 'Invalid'):

                # We don't publish on Fri/Sat/Sun (see comment on function
                # hold_updates_security_copy). Also, only allow the
                # promote-to-{updates,security} on derivative packages
                # if the master packages are already ready for promotion
                # or already promoted to the updates/security pockets.
                tbug = self.taskbyname[self.projectname].bug
                tsk_st = { 'promote-to-updates' : [ 'Confirmed', 'Fix Released' ],
                           'promote-to-security' : [ 'Confirmed', 'Fix Released', 'Invalid' ] }
                if (not self.hold_updates_security_copy() and self.check_master_task(tbug, tsk_st) > 0):
                    task = self.taskbyname[self.projectname]
                    # If this is a derivative, it's supposed to be
                    # rebased on top of master, or to have security
                    # fixes as master has. Thus, we also enable
                    # publishing to the security pocket for the
                    # derivative if master will be or is published to
                    # -security. In case we have an error getting the
                    # status of the master security task, return (try
                    # again later)
                    tsk_st = { 'promote-to-security' : [ 'Confirmed', 'Fix Released' ] }

                    # If the master bug's tasks are not completely ready.
                    #
                    security_master = self.check_master_task(tbug, tsk_st)
                    if security_master < 0:
                        return

                    if self.security_publishing_required or security_master == 2:
                        self.verbose('Requires publishing to the -security pocket\n')
                        if self.taskbyname['promote-to-security'].status == 'New':
                            self.set_task_to_state('promote-to-security', 'Confirmed')
                    else:
                        if self.taskbyname['promote-to-security'].status == 'New':
                            self.set_task_to_state('promote-to-security', 'Invalid')

                    if self.taskbyname['promote-to-updates'].status == 'New':
                        self.set_task_to_state('promote-to-updates', 'Confirmed')
                        self.set_tagged_timestamp(task, 'kernel-stable-Promote-to-updates-start')
                        self.set_phase(task, 'CopyToUpdates')
                    # Now send a happy email 
                    msgbody = 'All tests are complete and the publishing tasks have been set to Confirmed\n'
                    #self.send_email(task, 'Package is ready for publication', msgbody)
                    #self.send_status_update(task, 'available for publication.')
                else:
                    self.verbose('Unable to set promote-to-{updates,security} ')
                    self.verbose('tasks. We are either near\nthe weekend, when ')
                    self.verbose('no publising is done, or this is a derivative ')
                    self.verbose('bug\nwhere the master bug isn\'t ready for ')
                    self.verbose('release or released yet\n')

            else:
                # don't have required testing signoffs
                self.verbose('ERROR: test completion tags not found during release test!\n')
                # Send email and possibly a status update
                msgbody = 'During the release test either the certification-testing-passed or the qa-testing-passed tag was not found\n'
                msgbody = msgbody + 'Tags on this bug are:\n'
                for ftag in self.bugtags:
                    msgbody = msgbody + '    ' + ftag + '\n'
                msgbody = msgbody + '\n'
                msgbody = msgbody + 'Further processing of this bug by Workflow Manager is halted.\n'
                self.send_comment(self.taskbyname[self.projectname], 'Test completion tags not found during release test', msgbody)
                # stop further processing by this bot
                self.set_task_to_state(self.projectname, 'Incomplete')
                self.set_phase(self.taskbyname[self.projectname], 'OnHold')
        # this method is not associated with a task state transition so no status returned
        return 

    def check_for_final_close(self, taskobj):
        """
        If either of the publishing tasks is set to complete (Fix Released) we
        make a check to see whether we can set the entire tracking bug to Fix Released (done)
        """
        self.verbose('*** Performing check for final close test\n')

        if self.taskbyname[self.projectname].status == 'Fix Released':
            print ' Bug already closed, aborting check'
            return False

        if (( self.taskbyname['promote-to-updates'].status == 'Fix Released') and
            (self.taskbyname['promote-to-security'].status == 'Invalid' or
            self.taskbyname['promote-to-security'].status == 'Fix Released')):

            # Check if packages were copied to the right pocket->component
            current_time = datetime.utcnow()
            pok_sec = True
            if self.taskbyname['promote-to-security'].status == 'Fix Released':
                pok_sec = self.check_component_in_pocket(taskobj,
                            'kernel-stable-Promote-to-updates-end',
                            current_time, 'security')
            pok_upd = self.check_component_in_pocket(taskobj,
                        'kernel-stable-Promote-to-updates-end',
                        current_time, 'updates')
            if not (pok_sec and pok_upd):
                return False

            print self.printlink,
            print ' Everything is done, setting bug to Fix Released'
            self.set_task_to_state(self.projectname, 'Fix Released')
            self.set_phase(taskobj, 'Released')

            # Send email and possibly a status update -spc- TODO
            msgbody = 'The package has been published and the bug is being set to Fix Released\n'
            self.send_comment(taskobj, 'Package Released!', msgbody)

            task = self.taskbyname['promote-to-updates']
            self.send_status_update(task, 'has been published.')

        # We should never trigger a release test from this, since it should have lready been done
        return False

    # main
    #
    def main(self):
        try:
            # Load our config options.
            #
            cfg_path = path.dirname(__file__) + '/sru-workflow.cfg'
            with open(cfg_path, 'r') as f:
                self.cfg = json.load(f)

            self.initialize()

            self.projects_tracked = [ 'kernel-development-workflow', 'kernel-sru-workflow' ]
            if self.args.bugs:
                for bugid in self.args.bugs:
                    self.shank(bugid)

            else:
                for project in self.projects_tracked:
                    info('Project: %s' % project)

                    for bugid in self.get_buglist(project):
                        self.shank(bugid)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        return

    # end of main

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I do increadible things to kernel workflow bugs.
    '''
    app_epilog = '''
examples:
    sb
    sb --verbose
    sb --verbose --dry-run
    sb --verbose --staging
    sb --bugs=1134424,1133589
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--verbose', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--dryrun', action='store_true',  default=False, help='Don\'t modify the bug(s). Should be used with --verbose.')
    parser.add_argument('--staging', action='store_true', default=False, help='Use the staging LP service instead of the production one.')
    parser.add_argument('--sauron',  action='store_true', default=False, help='I\'m a professional, I know what I\'m doing. (will work on bugs marked \'invalid\')')
    parser.add_argument('--bugs',                         default=None,  help='A comma seperated list of bug ids. Only these bug ids will be processed.')
    parser.add_argument('--logfile',                      default=None,  help='Where to log the output.')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.verbose:
        basicConfig(filename=args.logfile, level=DEBUG, format=log_format)
    else:
        basicConfig(filename=args.logfile, level=INFO, format=log_format)

    if args.bugs:
        args.bugs = args.bugs.replace(' ', '')
        if ',' in args.bugs:
            args.bugs = args.bugs.split(',')
        else:
            args.bugs = [args.bugs]

    try:
        app = Shank(args)
        exit(app.main())
    except HTTPError, err:
        if err.code == 503:
            print 'Launchpad server is down (503)'
        else:
            print 'Launchpad returned error %d' % err.code
            raise

# vi:set ts=4 sw=4 expandtab:

